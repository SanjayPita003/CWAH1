
pipeline {
    agent any
    environment {
        // Define the credentials ID you will use in Jenkins for SSH
        SSH_CREDENTIALS_ID = 'ssh-credentials-id'
    }
    stages {
        stage('Check Data Package') {
            steps {
                script {
                    def servers = ['ny-trng1', 'ny-trng2']
                    servers.each { server ->
                        sshCommand remote: server, command: 'ls -ld /L/ctc_data/ctc_data.G007.06'
                    }
                }
            }
        }
        stage('Check Workstation Package') {
            steps {
                script {
                    def servers = ['chi-trng1', 'chi-trng2']
                    servers.each { server ->
                        sshCommand remote: server, command: 'ls -ld /L/ctcws/ctcws.38.32'
                    }
                }
            }
        }
        stage('Check GDS Package') {
            steps {
                script {
                    sshCommand remote: 'chi-trng1', command: 'ls -ld /L/gds/tma.21.8'
                    sshCommand remote: 'chi-trng2', command: 'ls -ld /L/gds/tma.21'
                }
            }
        }
        stage('Step 1.3') {
            steps {
                script {
                    sshCommand remote: 'train.trning@cnd1', command: 'EMANR RT2\nDE'
                }
            }
        }
        stage('Step 1.4') {
            steps {
                script {
                    sshCommand remote: 'rc.mgr@cnd1', command: 'EMANR RRA\nDE'
                }
            }
        }
        stage('Step 1.5') {
            steps {
                script {
                    sshCommand remote: 'rc.mgr@cnd1', command: 'V $AUDIT.EMANR\nPURGE *\nFI'
                }
            }
        }
        stage('Step 1.6') {
            steps {
                script {
                    sshCommand remote: 'rc.xfer@cnd1', command: 'SANITY\n($EXDEV3 - Required: State = STARTED, Status = READY)'
                }
            }
        }
        stage('Step 1.7') {
            steps {
                script {
                    sshCommand remote: 'rc.mgr@cnd1', command: 'V $AUDIT.EMANRS\nINSTALL EMANRS EMANR'
                }
            }
        }
        stage('Step 1.8') {
            steps {
                script {
                    sshCommand remote: 'rc.xfer@cnd1', command: '''\
V $AUDIT.EMANR
PURGE PROFILES
FUP DUP EMANP.PROFILES,*
EDIT PROFILES
'''
                }
            }
        }
    }
    post {
        always {
            echo 'Script execution completed.'
        }
    }
}

def sshCommand(Map params) {
    sshagent(credentials: [env.SSH_CREDENTIALS_ID]) {
        sh "ssh -o StrictHostKeyChecking=no ${params.remote} '${params.command}'"
    }
}
